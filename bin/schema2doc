#!/usr/bin/env node

var fs = require('fs');
var byline = require('byline');

// templates
var toCommon = require('../lib/toCommon'); // contains processing of schema
var toCsv = require('../lib/toCsv');
var toHtml = require('../lib/toHtml');
var toRaw = require('../lib/toRaw');

// process input stream
var input = [];
var stream = byline(process.stdin/*,{keepEmptyLines:true}*/);
stream.on("data", function(line) {
	input.push(line + "");
}).on("end", function() {
	processInput(input.join("\n"));
});

function processInput(inputString) {
		function generate(/*callback */ to, /*string*/ jsonInput, /*string?*/ file) {
			// to: function
			//		callback to toCsv, toHtml, toRaw
			// jsonInput : string
			//		input schema that will be processed
			// file : string?
			//		path where output file should be saved
			write(to(jsonInput, toCommon), file);
		}
		
		// get arguments
		var args = Array.prototype.concat.apply([], process.argv.slice(2));

		try {
			input = JSON.parse(inputString);
		} catch (e) {
			process.stderr.write("ERROR: schema could not be parsed, please check schema\n");
			process.stderr.write(e);
		}
		
		var param = args[0];
		var filePath = args[1];	
		if (param) {
			// process first arguments
			switch (param) {
			case '--help' : 
				/*falls through*/
			case '-h':
				printHelp();
				break;
			case '-c':
				generate(toCsv, input, filePath);
				break;
			case '-l':
				generate(toHtml, input, filePath);
				break;
			case '-r': 
				
			default:
				generate(toRaw, input, filePath);
			}
		} else { // default is raw format		
			generate(toRaw, input, filePath);
		}
	}


function write(/*string*/ str, /*string?*/file) {
	// str : string
	//		processed schema, output depends on options (html, csv, raw)
	// file : string?
	//		if defined, try to save output to given file path, output is always print on stdout
	if(file) {
		try {
			fs.writeFile(file, str);
		} catch(e) {
			process.stderr.write("Error: output could not be saved");
			process.stderr.write(e);
		}
	}
	process.stdout.write(str + "\n");
}

function printHelp() {
	var helpText = "Usage:\n" + //
		"schema2doc [-h|-r|-l|-c|-o <FILE>]\n" + //
		"options:\n" + //
		"\t-h print this help\n" + //
		"\t-r print to raw format (default)\n" + //
		"\t-l print to html format, table and simple css\n" + //
		"\t-c print to csv format\n" + //
		"\t-a print constraints, only intervals are now supported (TODO)\n" + //
		"\t-o <FILE> save output to a file (file will be created and overwritten)\n";

	console.log(helpText);
}
